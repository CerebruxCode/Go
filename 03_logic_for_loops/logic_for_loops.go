package main

import "fmt"

func main() {

	// Λογικοί τελεστές χρησιμοποιούνται για να ελέγξουμε αν μια κατάσταση
	// ειναι αληθείς (true) ή ψευδής (false)
	// Τα αποτελέσματα χρήσης των τελεστών παριστάνονται παρακάτω:
	
	fmt.Println("true && false =", true && false)// && -> και
	fmt.Println("true || false =", true || false)// || -> ή
	fmt.Println("!true =", !true) 		     // ! -> όχι
	/*
	Η προτεραιότητα υπολογισμού των τελεστών ορίζεται ως εξής:
		()
		! + -
		* / %
		+ -
		< <= > >=
		== !=
		&&
		||
	*/
	
	
	/*
		Η Go έχει μόνο μία δομή (construct) βρόχου, το for loop.
		Περιλαμβάνει δύο μορφές.
		
		Η βασική μορφή του βρόχου έχει τρία συστατικά χωρισμένα με ερωτηματικά:

		την init statement: εκτελείται πριν από την πρώτη επανάληψη
		η condition expression: αξιολογείται πριν από κάθε επανάληψη
		η post statement: εκτελείται στο τέλος κάθε επανάληψης

		Η init statement θα είναι συχνά μια σύντομη δήλωση μεταβλητής και οι μεταβλητές
		που δηλώνονται εκεί είναι ορατές μόνο στο πεδίο της δήλωσης for.
		Ο βρόχος θα σταματήσει την επανάλυψη όταν η κατάσταση boolean εκτιμάται ως ψευδής.

		Σημείωση: Σε αντίθεση με άλλες γλώσσες, όπως C, Java ή JavaScript,
		δεν υπάρχουν παρενθέσεις που να περιβάλλουν τα τρία στοιχεία της δήλωσης for
		και οι αγκύλες {} απαιτούνται πάντα.
		
		
		Διαδικασίες ελέγχου μιας σχέσης μεταβλητών περιλαμβάνουν : 
		-  == (είναι)
		-  != (δεν είναι)
		-  < (μικρότερο απο)
		-  > (μεγαλύτερο από)
		-  <=(μικρότερο ή ίσο με)
		-  >=(μεγαλύτερο ή ίσο με)
	
	
	*/
	
	// Εδώ βλέπουμε την α;πλή μορφή με μία συνθήκη που μοιάζει με (while i <= 10)
	i := 1
	
	for i <= 10 {
		fmt.Println(i)
		// Μπορείτε να γράψετε με συντομογραφία το i = i + 1 ως εξής:
		
		i++
	}
	
	// Αντίθετα, παρακάτω βλέπουμε την βασική μορφή της for
	 
	for j := 0; j < 5; j++ {
	
		fmt.Println(j);
	
	}

}
