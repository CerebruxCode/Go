package main

import (
	"fmt"
	"time"
)

// CHANNELS
/*
 Τα κανάλια παρέχουν έναν τρόπο για δύο go-ρουτίνες να επικοινωνούν μεταξύ τους
 ώστε να στέλνουν δεδομένα τους αμφότερα και να συγχρονίζουν την εκτέλεσή τους.
*/

/*
	Αυτό το πρόγραμμα θα εκτυπώνει "ping", "pong" για πάντα (πατήστε enter για να
	σταματήσει). Ένας τύπος κανάλι (type chanel) εκπροσωπείται με την λέξη-κλειδί chan που
	ακολουθείται από τον τύπο των πραγμάτων που έχουν εισαχθεί στο κανάλι (στην παρακάτω
	περίπτωση εισάγαμε string).
	Ο τελεστής <- (αριστερό βέλος) χρησιμοποιείται για την αποστολή και λήψη
	μηνυμάτων στο κανάλι.

*/

// Δημιουργούμε δυο funcs "ping" και "pong" κανάλια που θα προβάλονται ασταμάτητα

func pinger(c chan string) {
	for i := 0; ; i++ {
		c <- "ping" // c <- "ping" σημαίνει αποστολή "ping" στο κανάλι c.
	}
}

func ponger(c chan string) {
	for i := 0; ; i++ {
		c <- "pong" // c <- "pong" σημαίνει αποστολή "pong" στο κανάλι c
	}
}

// Δημιουργούμε μια func "printer" κανάλι που θα προβάλει τα ping/pong ανα 1 δευτερόλεπτο

func printer(c chan string) {
	for { // Βλέπουμε οτι η for εδω θα εκτελέιται για πάντα μέχρι να πατήσουμε
		// enter στο πληκτολόγιο
		msg := <-c // msg := <- c σημαίνει λήψη ενός μηνύματος απο το κανάλι c
		// και αποθήκευση του στην μεταβλητή msg
		fmt.Println(msg) // Η fmt γραμμή θα μπορούσε επίσης να έχει γραφτεί
		// όπως αυτό: fmt.Println(<-c) οπότε θα μπορούσαμε να
		// καταργήσουμε την γραμμή msg := <-c
		time.Sleep(time.Second * 1)
	}
}

/*
Χρησιμοποιώντας ένα κανάλι σαν αυτό συγχρονίζουμε τις go-ρουτίνες. Όταν ο
pinger και ο ponger προσπαθεί να στείλει ένα μήνυμα στο κανάλι, θα περιμένει μέχρι ο printer να
είναι έτοιμος να λάβει το μήνυμα. (αυτό είναι γνωστό ως blocking)
*/

func main() {
	// Η make δημιουργεί το κανάλι c που μπορεί να κρατήσει μια συμβολοσειρά
	// int κανάλι intChan: = make (chan int)
	var c chan string = make(chan string)

	go pinger(c)
	go ponger(c)
	go printer(c)

	var input string
	fmt.Scanln(&input) // πατάμε enter στο πληκτολόγιο για να σταματήσει το πρόγραμμα

}

/*
Σημείωση: Κατεύθυνση καναλιού

Μπορούμε να καθορίσουμε μια κατεύθυνση σε έναν τύπο καναλιού περιορίζοντάς
τον έτσι ώστε να κάνει αποστολή ή λήψη. Για παράδειγμα η συνάρτηση pinger
μπορεί να αλλάξει σε αυτό:

	func pinger(c chan<- string)

Τώρα το c μπορεί μόνο να αποσταλεί. Προσπαθώντας να λάβει από to c θα οδηγήσει
σε ένα σφάλμα μεταγλώττισης. Ομοίως μπορούμε να αλλάξουμε την συνάρτηση
printer σε αυτό:

	func printer(c <-chan string)

Ένα κανάλι που δεν έχει αυτούς τους περιορισμούς είναι γνωστό ως διπλής
κατεύθυνσης. Ένα κανάλι διπλής κατεύθυνσης μπορεί να περάσει σε μια συνάρτηση
η οποία παίρνει κανάλια που μόνο στέλνουν ή μόνο λαμβάνουν, αλλά το αντίστροφο
δεν ισχύει

*/
