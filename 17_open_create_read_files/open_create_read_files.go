/*
Τι θα μάθουμε:
- Να ανοίγουμε αρχεία txt, csv, pdf
- Το workflow στην διαχείριση των αρχείων
- Τα πακέτα που μας παρέχουν λειτουργίες
διαχείρισης αρχείων
*/

package main

import (
	"bufio"
	"encoding/csv"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"

	"github.com/go-gota/gota/dataframe"
	"rsc.io/pdf"
)

func main() {
	// FILE I/O
	/*
		Η μεθοδολογία διαχείρισης αρχείων ακολουθεί τα παρακάτω βήματα:
		- Ανοίγω το αρχείο
		- Αναλύω / Επεξεργάζομαι (parse/process)
		- Κλείνω το αρχείο (στις περισσότερες των περιπτώσεων)

		Τα πακέτα που χρησιμοποιούνται συνήθως είναι :
		- io/ioutil
		- os
		- bufio
		- encoding/csv
		- rsc.io/pdf
		- etc

	*/

	/*== Πρώτη μέθοδος ανοίγματος αρχείου ==
		<= Βήμα 1: Άνοιγμα αρχείου >=

	Με την ioutil. συνηθίζεται να ανοίγουμε αρχεία
	με λίγα δεδομένα

	Η πρότυπη βιβλιοθήκη "io" της Go περιλαμβάνει
	πολλές υλοποιήσεις των διεπαφών διαχείρισης
	αρχείων για εισαγωγή και εγγραφή δεδομένων,
	συνδέσεων δικτύου, συμπιεστών, κρυπτογράφησης και άλλων.

	*/

	// Προσπάθησε να ανοίξεις το αρχείο.
	content, err := ioutil.ReadFile("files/yunus.txt")
	if err != nil { // Αν δεν το καταφέρεις πρόβαλε το σφάλμα
		log.Fatal(err)
	}
	// <= Βήμα 2: Parse/Process αρχείου >=

	// Μετατρέψτε το περιεχόμενο σε μια συμβολοσειρά
	// διότι η ioutil ανοίγει το αρχείο σε byte format
	// Δοκίμασε να αφαιρέσεις την μετατροπή string()

	fmt.Printf("\n\n== Πρώτη μέθοδος ανοίγματος αρχείου ==\n\n")
	fmt.Println(string(content))

	/*== Δεύτερη μέθοδος ανοίγματος αρχείων ==
		<= Βήμα 1: Άνοιγμα αρχείου >=

	Με την os.* συχνά να χρησιμοποιείται σε
	μεγάλα αρχεία.

	*/
	f, err := os.Open("files/sample.txt")
	if err != nil { // Αν δεν το καταφέρεις πρόβαλε το σφάλμα
		log.Fatal(err)
	}
	defer f.Close() // με την os.Open πρέπει να έχουμε
	// το κλείσιμο του αρχείου σε αναμονή

	// <= Βήμα 2: Parse/Process αρχείου >=

	// με την os. πρέπει να φτιάξουμε και σαρωτή του
	// περιεχομένου πριν την ανάγνωση
	scanner := bufio.NewScanner(f)
	fmt.Printf("\n\n== Δεύτερη μέθοδος ανοίγματος αρχείου ==\n\n")
	for scanner.Scan() { // σαρώνει κάθε γραμμη
		fmt.Println(scanner.Text()) // τυπώνει κείμενο
		// αν όλα πήγαν καλά εκτελείται η defer f.Close*()
	}
	// αν προκύψει αδυναμία ανάγνωσης, εμφάνισε σφάλμα
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	//-------------------------------------------------//
	/* == Μέθοδος δημιουργίας αρχείου και ανοίγματος ==

		Παρακάτω, αντί να ανοίγουμε υπάρχον αρχείο,
		δημιουργούμε το αρχείο με όνομα edit.txt
	    στην διαδρομή απο όπου εκτελείται η εφαρμογή
		π.χ. αν τρέξουμε την εφαρμογή
		<<go run enas-fakelos/kodikas.go>>
		τότε το αρχείο θα δημιουργηθεί δίπλα απο τον φάκελο
		"enas-fakelos" και όχι μέσα στον φάκελο δίπλα απο
		το "kodikas.go"

	*/

	fmt.Printf("\n== Μέθοδος δημιουργίας και ανοίγματος αρχείου ==\n")
	createdfile, err := os.Create("files/edit.txt")
	if err != nil { // Πρόβαλε τυχόν σφάλματα
		log.Fatal(err)
	}
	// Γράψτε μια συμβολοσειρά στο αρχείο
	createdfile.WriteString("Αυτό είναι ένα τυχαίο κείμενο")
	// Κλείστε το αρχείο
	createdfile.Close()
	// αφού το κλείσουμε ας το ανοίξουμε με την πιο απλή
	// μέθοδο που μάθαμε και να προβάλουμε το κείμενο του
	openedited, err := ioutil.ReadFile("files/edit.txt")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("\n %v", string(openedited))

	//-------------------------------------------------//
	fmt.Printf("\n\n== Μέθοδος ανοίγματος αρχείου CSV ==\n\n")
	// == Πρώτη μέθοδος ανοίγματος CSV ==
	//		με την βιβλιοθήκη csv

	// Προσπάθησε να ανοίξεις το αρχείο
	csvfile, err := os.Open("files/problems.csv")
	// Αν δεν το καταφέρεις, θέλω να μου το πεις
	if err != nil {
		log.Fatal(err)
	}
	// περίμενες τις επόμενες εργασίες
	defer csvfile.Close() // και μετά κλείσε το αρχείο
	// Χρησιμοποίησε την βιβλιοθήκη csv. και
	// φτιάξε έναν νέο αναγνώστη του αρχείου csvfile
	// και ονόμασε αυτό τον αναγνώστη csvreader
	csvreader := csv.NewReader(csvfile)

	for { // Την χρησιμοποιούμε όταν δεν ξέρουμε
		// τον συνολικό αριθμό γραμμών/στηλών που έχει το CSV
		// Για κάθε εγγραφή να διαβαστεί και να
		// αποθηκευτεί στην record
		record, err := csvreader.Read()
		// αν το σφάλμα είναι επειδή
		// έφτασες στο τέλος του αρχείου
		// απλά σταμάτα
		if err == io.EOF {
			break
		}
		// για οποιοδήποτε άλλο λόγο
		// σφάλματος πες μου ποιο ήταν το σφάλμα
		if err != nil {
			log.Fatal(err)
		}
		// αν δεν υπάρχει κανένα σφάλμα τότε
		// εμφάνισε μια μια τις εγγραφές
		fmt.Println(record)
		// αν θέλω μονο την 2 στήλη τότε το τρέχω με τον
		// παρακάτω τρόπο:
		//fmt.Println(record[1])
	}
	// == Δεύτερη μέθοδος ανοίγματος CSV ==
	//με εξωτερική βιβλιοθήκη π.χ. gota, qframes, dataframe-go
	/*
		Οι εξωτερικές βιβλιοθήκες είναι αρκετές φορές πιο
		εξειδικευμένες παρότι δεν ανοίκουν στην ενσωματωμένη
		standard library της Go. Συντηρούνται όμως απο
		την κοινότητα της go.

		Πριν χρησιμοποιήσουμε την βιβλιοθήκη θα πρέπει να τρέξουμε
		go get github.com/go-gota/gota/dataframe
		για να κατέβει στo στον υπολογιστή μας και να
		μπορούμε να τον κάνουμε import
	*/
	fmt.Printf("\n\n== Βιβλιοθήκη ανοίγματος αρχείου CSV ==\n\n")

	// Ακολουθούμε το ίδιο μοτίβο, άνοιξε, επεξεργάσου, κλείσε
	csvfilelib, err := os.Open("files/greece_covid19.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer csvfilelib.Close()
	// αφού εισάγαμε την νέα βιβλιοθήκη, χρησιμοποιούμε την ReadCSV
	// μέθοδό της και αποθηκεύουμε το αποτέλεσμά της στην df
	df := dataframe.ReadCSV(csvfilelib)
	fmt.Println(df)

	//-------------------------------------------------//
	fmt.Printf("\n\n== Μέθοδος ανοίγματος αρχείου PDF ==\n\n")
	/*
		Πριν χρησιμοποιήσουμε την βιβλιοθήκη rsc.io/pdf
		θα πρέπει να τρέξουμε:

			go get rsc.io/pdf

		για να κατέβει στo στον υπολογιστή μας και να
		μπορούμε να τον κάνουμε import
	*/
	pdfile, err := pdf.Open("files/cerebrux.pdf")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(pdfile.NumPage())         // μας εμφανίζει το σύνολο σελίδων
	fmt.Println(pdfile.Page(1).Content()) // πήγαινε στην 1 σελίδα και
	// εμφάνισε το περιεχόμενό της κωδικοποίησης της

}
