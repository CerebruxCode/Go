/*
Τι θα μάθουμε:
- Να ανοίγουμε αρχεία txt, csv, pdf
- Το workflow στην διαχείριση των αρχείων
- Τα πακέτα που μας παρέχουν λειτουργίες
διαχείρισης αρχείων
*/

package main

import (
	"bufio"
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	// FILE I/O
	/*
		Η μεθοδολογία διαχείρισης αρχείων ακολουθεί τα παρακάτω βήματα:
		- Ανοίγω το αρχείο
		- Αναλύω / Επεξεργάζομαι (parse/process)
		- Κλείνω το αρχείο (στις περισσότερες των περιπτώσεων)

		Τα πακέτα που χρησιμοποιούνται συνήθως είναι :
		- ioutils
		- os
		- bufio
		- csv
		- rsc.io/pdf
		- etc

	*/

	/*== Πρώτη μέθοδος ανοίγματος αρχείου ==
		<= Βήμα 1: Άνοιγμα αρχείου >=

	Με την ioutil. συνηθίζεται να ανοίγουμε αρχεία
	με λίγα δεδομένα

	Η πρότυπη βιβλιοθήκη "io" της Go περιλαμβάνει
	πολλές υλοποιήσεις των διεπαφών διαχείρισης
	αρχείων για εισαγωγή και εγγραφή δεδομένων,
	συνδέσεων δικτύου, συμπιεστών, κρυπτογράφησης και άλλων.

	*/

	// Προσπάθησε να ανοίξεις το αρχείο.
	content, err := ioutil.ReadFile("yunus.txt")
	if err != nil { // Αν δεν το καταφέρεις πρόβαλε το σφάλμα
		log.Fatal(err)
	}
	// <= Βήμα 2: Parse/Process αρχείου >=

	// Μετατρέψτε το περιεχόμενο σε μια συμβολοσειρά
	// διότι η ioutil ανοίγει το αρχείο σε byte format
	// Δοκίμασε να αφαιρέσεις την μετατροπή string()

	fmt.Printf("\n\n== Πρώτη μέθοδος ανοίγματος αρχείου ==\n\n")
	fmt.Println(string(content))

	/*== Δεύτερη μέθοδος ανοίγματος αρχείων ==
		<= Βήμα 1: Άνοιγμα αρχείου >=

	Με την os.* συχνά να χρησιμοποιείται σε
	μεγάλα αρχεία.

	*/
	f, err := os.Open("sample.txt")
	if err != nil { // Αν δεν το καταφέρεις πρόβαλε το σφάλμα
		log.Fatal(err)
	}
	defer f.Close() // με την os.Open πρέπει να έχουμε
	// το κλείσιμο του αρχείου σε αναμονή

	// <= Βήμα 2: Parse/Process αρχείου >=

	// με την os. πρέπει να φτιάξουμε και σαρωτή του
	// περιεχομένου πριν την ανάγνωση
	scanner := bufio.NewScanner(f)
	fmt.Printf("\n\n== Δεύτερη μέθοδος ανοίγματος αρχείου ==\n\n")
	for scanner.Scan() { // σαρώνει κάθε γραμμη
		fmt.Println(scanner.Text()) // τυπώνει κείμενο
		// αν όλα πήγαν καλά εκτελείται η defer f.Close*()
	}
	// αν προκύψει αδυναμία ανάγνωσης, εμφάνισε σφάλμα
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	/*
		Δημιουργούμε ένα αρχείο με όνομα edit.txt
		// στην διαδρομή απο όπου εκτελείται η εφαρμογή
		// π.χ. αν τρέξουμε την εφαρμογή
		// <<go run enas-fakelos/kodikas.go>>
		//  τότε το αρχείο θα δημιουργηθεί δίπλα απο τον φάκελο
		// "enas-fakelos" και όχι μέσα στον φάκελο δίπλα απο το "kodikas.go"
	*/
	// file, err := os.Create("edit.txt")
	// if err != nil { // Πρόβαλε τυχόν σφάλματα
	// 	log.Fatal(err)
	// }
	// // Γράψτε μια συμβολοσειρά στο αρχείο
	// file.WriteString("Αυτό είναι ένα τυχαίο κείμενο")
	// // Κλείστε το αρχείο
	// file.Close()

}
