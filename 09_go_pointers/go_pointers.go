package main

import "fmt"

// Δείκτες

/*
   Ένας δείκτης διατηρεί τη διεύθυνση μνήμης μιας τιμής. Οι δείκτες
   αναφέρονται σε μια τοποθεσία στη μνήμη όπου είναι αποθηκευμένη μια
   τιμή αντί να αναφέρονται στην ίδια την τιμή.

   Στη Go ένας δείκτης αναπαρίσταται χρησιμοποιώντας το χαρακτήρα *
   ακολουθούμενος από το τύπο της αποθηκευμένης τιμής. Ο * χρησιμοποιείται
   επίσης για να αναφερθούμε στις μεταβλητές των δεικτών. Όταν
   αναφερόμαστε σε ένα δείκτη έχουμε πρόσβαση στην τιμή που αυτός δείχνει

   var p * int
   Ο τύπος * T (αστερίσκος Τ) είναι δείκτης σε τιμή Τ. Η μηδενική τιμή του είναι μηδέν.

   Όταν π.χ. γράφουμε *xPtr = 0 εννοούμε “βάλε τον int 0 στη θέση μνήμης που δείχνει ο xPtr”.
   Αν αντίθετα γράψουμε xPtr = 0 θα πάρουμε ένα λάθος απ το μεταγλωττιστή επειδή
   xPtr δεν είναι int, είναι *int, που μπορεί να μας δώσει μόνο ένα άλλο *int.
   Τελικά χρησιμοποιούμε τον τελεστή & για να βρούμε τη διεύθυνση μιας μεταβλητής.
   Π.χ η &x επιστρέφει *int (pointer to an int) επειδή x είναι int.
   Αυτό είναι που μας επιτρέπει να μετατρέψουμε την αρχική μεταβλητή.

					& <-- Δείξε προς την διεύθυνση μνήμης μιας μεταβλητής
					* <-- Διάβασε Από / Διαμέσου της διέυθηνσης μνήμης μιας μεταβλητής
Έστω:

i, j := 42, 2701
p = &i

Το & εδώ δημιουργεί έναν δείκτη στον τελεστή του.

   fmt.Println(*p) // διαβάζω την i μέσω του δείκτη p
   *p = 21         // θέτω την i μέσω του δείκτη p
   Ο τελεστής * υποδηλώνει την υποκείμενη τιμή του δείκτη.

Αυτό είναι γνωστό ως "dereferencing" ή "indirecting".
Σε αντίθεση με τη C, η Go δεν έχει αριθμητικό pointer.

	p = &j         // δείκτης στο j
	*p = *p / 37   // διαίρεσε το j μέσω του δείκτη
	fmt.Println(j) // δες την νέα τιμή του j

*/

func main() {

	// Περνάμε την τιμή μιας μεταβλητής στη συνάρτηση
	x := 0
	changeXVal(x)
	fmt.Println("x =", x)

	// Αν περάσουμε μια αναφορά στη μεταβλητή μπορούμε
	// να αλλάξουμε την τιμή σε μια συνάρτηση

	changeXValNow(&x)
	fmt.Println("x =", x)

	// Πάρτε τη διεύθυνση του x στην οποία δείχνει, με το &
	fmt.Println("Memory Address for x =", &x)

	// Μπορούμε επίσης να δημιουργήσουμε ένα δείκτη με την new

	yPtr := new(int)
	changeYValNow(yPtr)
	fmt.Println("y =", *yPtr)

}

func changeXVal(x int) {

	// Δεν έχει επίδραση στην τιμή του x στην main()
	x = 2

}

// * δηλώνει ότι στέλνουμε μια αναφορά στην τιμή
func changeXValNow(x *int) {

	// Αλλάξτε την τιμή στη διεύθυνση μνήμης που αναφέρεται από το δείκτη
	// * μας δίνει πρόσβαση στην τιμή που αναφέρεται ο δείκτης

	*x = 2 // Αποθηκεύστε 2 στη διεύθυνση μνήμης που αναφέρεται το x

}

func changeYValNow(yPtr *int) {

	*yPtr = 100

}
