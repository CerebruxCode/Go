/*
Τι θα μάθουμε:
- Πως βάζουμε σχόλια στον κώδικά της Go.
- Πως κάνουμε import απο standard library αλλά και αυτές που δεν είναι
στην standard library αλλά έχουν φτιαχτεί απο άλλους.
- Πως φτιάχνουμε νέες function εντολές (συναρτήσεις)
- Printf, Println
- Πως δηλώνουμε μεταβλητές (Variables), δηλαδή λέξεις που αποθηκεύουν τιμές
- Πως κάνουμε αριθμητικές πράξεις

*/

// ============== Σχόλια στον κώδικα ========================

// 	Μην σχολιάζετε κακό κώδικα — ξαναγράψτε τον
// 	— Brian Wilson Kernighan (Unix, C, Awk, Go)
//	https://en.wikipedia.org/wiki/Brian_Kernighan

//Ξεκινώντας μια γραμμή με τα "//" μπορούμε να προσθέσουμε ένα προσωπικό σχόλιο σε μια γραμμή
/*
 Αν θέλουμε πολλαπλές γραμμές όπως αυτό που διαβάζετε τώρα,
 τότε βάζουμε το σχόλιο μας ανάμεσα σε αυτά τα
*/
/*
Στη Go, τα σχόλια παίζουν τόσο, εξαιρετικά συμπαντικό ρόλο στην
τεκμηρίωση του κώδικα, που χρησιμοποιούνται από την εντολή
"godoc", η οποία εξάγει αυτά τα σχόλια για τη δημιουργία
τεκμηρίωσης σχετικά με τα πακέτα Go.

Ένα σχόλιο τεκμηρίωσης θα πρέπει να είναι μια πλήρης πρόταση
που ξεκινά με το όνομα της οντότητας που περιγράφεται και
τελειώνει με τελεία.

Τα σχόλια θα πρέπει να προηγούνται των πακέτων καθώς και των
εξαγόμενων οντοτήτων (π.χ. εξαγόμενων συναρτήσεων, μεθόδων,
μεταβλητών πακέτων, σταθερών και δομών), για τα οποία θα
μάθετε περισσότερα στα επόμενα μαθήματα.

Τα σχόλια του πακέτου πρέπει να γράφονται απευθείας πριν
από μια δήλωση πακέτου (package x) και να ξεκινούν με το
package x ... ως εξής:

	// Package kelvin παρέχει εργαλεία για μετατροπή
	// θερμοκρασιών από και προς Kelvin.
	package kelvin


Μια μεταβλητή σε επίπεδο πακέτου μπορεί να μοιάζει με αυτό:

	// TemperatureCelsius αντιπροσωπεύει μια ορισμένη
	// θερμοκρασία σε βαθμούς Κελσίου.
	var TemperatureCelsius float64

Ένα σχόλιο συνάρτησης θα πρέπει να γράφεται ακριβώς πριν
από τη δήλωση συνάρτησης. Θα πρέπει να είναι μια πλήρης πρόταση
που ξεκινά με το όνομα της συνάρτησης.
Για παράδειγμα, ένα εξαγόμενο σχόλιο για τη συνάρτηση Calculate
θα πρέπει να έχει τη μορφή // Calculate ... . Θα πρέπει επίσης
να εξηγεί ποια ορίσματα - παραμέτρους παίρνει η συνάρτηση,
τι κάνει με αυτά και τι σημαίνουν οι επιστρεφόμενες τιμές της,
που τελειώνουν σε τελεία . :

	// CelsiusFreezingTemp επιστρέφει μια ακέραια τιμή
	// ίση με τη θερμοκρασία στην οποία το νερό παγώνει
	// σε βαθμούς Κελσίου.
	func CelsiusFreezingTemp() int {
    	return 0
	}

Διαβάστε : https://golang.org/doc/effective_go#commentary
Διαβάστε επίσης κάποιους κανόνες καλής πρακτικής για σχόλια
στον κώδικα https://dave.cheney.net/practical-go/presentations/qcon-china.html#_comments
*/

/*
Επανάληψη :
Κάθε πρόγραμμα Go ξεκινά με μια "Package Declaration" (δήλωση πακέτου)
που παρέχει έναν τρόπο για επαναχρησιμοποίηση του κώδικα.

Η 'main' είπαμε οτι είναι ο "πυρήνας" του προγράμματος απο όπου
ξεκινάει η εφαρμογή μας. Έτσι αφού οι εφαρμογές αποτελούνται απο αρχεία κώδικα
που ανήκουν σε πακέτα, όλες οι εφαρμογές έχουν μια και μόνο main.
Είναι η πύλη εισόδου της εφαρμογής απο όπου ξεκινάει η εκτέλεση της.
Όλα τα υπόλοιπα αρχεία έχουν και αυτά δήλωση για το σε ποιο package ανήκουν
*/
package main

import (
	"fmt"     // προφέρεται ως "φαμτ" ή formatter
	"runtime" // την χρειαζόμαστε για να προβάλουμε πληροφορίες
	// του συστήματος στο οποίο τρέχει η εφαρμογή μας.
)

// Το import επιτρέπει την εισαγωγή βιβλιοθηκών και την εισαγωγή κώδικα από
// άλλα πακέτα (π.χ. απο github θα γράφαμε << import "github.com/CerebruxCode/Go" >>)
// Εδώ η βιβλιοθήκη fmt που περιλαμβάνεται στην standrad
// library και που εισάγουμε μας παρέχει εργαλεία μορφοποίησης - προβολής
// δεδομένων. Επειδή είναι στην standrad library την καλούμε με το όνομά
// της και όχι με την online διεύθυνσή της. Το ίδιο ισχύει και για την runtime

// Όπως και σε άλλες γλώσσες, έτσι και στην Go μπορούμε να συνδυάσουμε
// ενσωματωμένες εντολές ώστε να δημιουργήσουμε νέες μεθόδους και λειτουργίες.
// Αυτές ονομάζονται functions

func add(x int, y int) int { // δημιουργούμε μια δικιά μας function (συνάρτηση) ξεκινώντας την εντολή με την
	// λέξη func και με ένα όνομα (π.χ. add) η οποία εδώ θα κάνει μια απλή αριθμητική
	// πράξη προσθήκης δύο αριθμών. Η εντολή add που φτιάχνουμε παίρνει 2 ορίσματα x και y
	// τύπου integer (int - ακέραιος αριθμός) και δίνουν έξοδο (αποτέλεσμα πράξης) πάλι int
	// πηγή: https://blog.golang.org/gos-declaration-syntax

	return x + y // Η έξοδος: προσθέτει δυο αριθμούς τύπου int που θα δοθούν στο add(x,y)

	/*  TIP: εφόσον τα ορίσματα είναι καί τα δύο int θα μπορούσαμε επίσης να τα γράψουμε με ένα int
	όπως π.χ.

	func add(x, y int) int {
		return x + y
	}

	*/

}

// Οι functions του προγράμματός μας ξεκινούν όπως είπαμε με τη λέξη κλειδί
// "func" και περιβάλλουν τον κώδικα μέσα σε { }
// Η main είναι η function που εκτελείται όταν τρέχετε το πρόγραμμά σας.
// Θα εκτελεστεί αυτόματα το πρόγραμμα, χωρίς να χρειάζεται να το ξεκινήσετε
// γράφοντας π.χ. main() στο τέλος του κώδικα όπως απαιτείται σε άλλες γλώσσες.

func main() { // η κύρια συνάρτηση που εκτελεί την εφαρμογή

	fmt.Printf("Το Λειτουργικό σου σύστημα: %s\nΗ Αρχιτεκτονική του: %s\n", runtime.GOOS, runtime.GOARCH)
	// εκτελούμε την Printf που βρίσκεται μέσα στην fmt βιβλιοθήκη
	// που εισάγαμε και αντικαθιστά τα %s %s με τα αποτελέσματα των
	// εντολών GOOS και GOARCH της βιβλιοθήκης runtime.
	// η εντολή \n λέει στην Printf να τυπώσει το αμέσως επόμενο στοιχείο σε νέα γραμμή

	fmt.Println("Γεια σου κόσμε") // εκτελούμε την Println function που βρίσκεται
	// μέσα στην fmt βιβλιοθήκη που εισάγαμε.
	/*	Println

		Η Println είναι και αυτή μια function μέσα απο το πακέτο fmt
		που "φορμάρει"- διαμορφώνει - εξάγει - τυπώνει
		μια συμβολοσειρά (strings), η οποία περιβάλλεται από διπλά εισαγωγικά
		π.χ. "Γεια σου κόσμε", σε μια νέα γραμμή στην οθόνη
	*/

	fmt.Println(add(42, 13))
	/*
		εδώ καλούμε την δικιά μας function (add) που είχαμε
		δημιουργήσει και την χρησιμοποιούμε για να προσθέσουμε τους δύο int αριθμούς x,y
		και με την βοήθεια της fmt.Println να προβάλουμε το αποτέλεσμα στην οθόνη

		Μπορείτε να μάθετε για την Println αλλά και άλλες "built-in functions of standard library"
		πληκτρολογώντας σε ένα τερματικό:

		go doc fmt Println

	*/

	/*	VARIABLES

		Οι μεταβλητές (Variables) γράφονται στατικά (statically typed), πράγμα που σημαίνει ότι ο τύπος
		(type - είδος - π.χ αριθμός/γράμμα/δεκαδικό κλπ) τους δεν μπορεί να αλλάξει (static).
		Τα ονόματα μεταβλητών πρέπει να ξεκινούν με ένα γράμμα και μπορεί να περιέχουν γράμματα,
		αριθμούς ή την κάτω παύλα _

		Για τους αριθμούς έχουμε τους παρακάτω τύπους:
		Μια int (integer - ακέραιος) είναι ένας θετικός ή αρνητικός αριθμός χωρίς δεκαδικά ψηφία

		int8  : ονομάζεται signed  8-bit integers (-128 έως 127)
		int16 : ονομάζεται signed 16-bit integers (-32768 έως 32767)
		int32 : ονομάζεται signed 32-bit integers (-2147483648 έως 2147483647)
		int64 : ονομάζεται signed 64-bit integers (-9223372036854775808 έως 9223372036854775807)
		το int σε 32bit επεξεργαστές είναι int32 και int64 σε 64bit

		uint8  : ονομάζεται unsigned  8-bit integers (0 έως 255)
		uint16 : ονομάζεται unsigned 16-bit integers (0 έως 65535)
		uint32 : ονομάζεται unsigned 32-bit integers (0 έως 4294967295)
		uint64 : ονομάζεται unsigned 64-bit integers (0 έως 18446744073709551615)
		uint, uintptr σε 32bit επεξεργαστές είναι uint32 και uint64 σε 64bit
	*/

	// παράδειγμα δήλωσης μιας variable τύπου int64
	var age int64 = 40

	// Αντίθετα ένας float τύπου αριθμός είναι με δεκαδικά ψηφία:
	// float32, float64
	// παράδειγμα δήλωσης μιας variable τύπου float64
	var favNum float64 = 1.61803398875

	fmt.Println(age, " ", favNum) // 	Στην Println εκτός απο strings μπορείτε
	// να χρησιμοποιήσετε και μεταβλητές
	// (το κενό διάστημα προστίθεται αυτόματα οπότε δεν χρειάζεται)

	// Στην πραγματικότητα δε χρειάζεται να καθορίσετε τον τύπο δεδομένων, ούτε χρειάζεστε
	// ερωτηματικό στο τέλος όπως ίσως έχετε δει σε άλλες γλώσσες προγραμματισμού
	/*
		Δεν μπορείτε, ωστόσο αργότερα, να εκχωρήσετε έναν μη συμβατό τύπο στην μεταβλητή
		π.χ. να αλλάξετε το υφιστάμενο randNum που το ξεκινήσατε ως int να το κάνετε string

			randNum = "Hello"
	*/

	randNum := 1 // Η Go καταλαβαίνει οτι πρόκειται για var τύπου int οπότε
	// με τον τελεστή := χρησιμοποιήσαμε την συντομογραφία που μας παρέχει η Go
	// Αντί λοιπόν να γράψουμε "var randNum int", με το :=
	// δηλώνουμε και ταυτόχρονα αρχικοποιούμε την μεταβλητή randNum

	fmt.Println(randNum)

	/*
		ΑΡΙΘΜΗΤΙΚΕΣ ΠΡΑΞΕΙΣ

		Μπορείτε επίσης να κάνετε αριθμητικές πράξεις μέσα σε Println
		(Σημειώστε ότι οι float αριθμοί δεν είναι ακριβείς)

		Διαθέσιμες αριθμητικές πράξεις : +, -, *, /, %
		το % ή αλλιώς modulus - modulo ή remainder είναι
		το υπόλοιπο μιας ακέραιας διαίρεσης
	*/
	var numOne = 1.000 // Η Go όπως είπαμε καταλαβαίνει οτι πρόκειται για float
	var num99 = .999   // Η Go όπως είπαμε καταλαβαίνει οτι πρόκειται για float
	fmt.Println(numOne - num99)

	a := 6
	b := 4.0 // float
	fmt.Println("6 + 4 =", 6+4)
	fmt.Println("6 - 4 =", 6-4)
	fmt.Println("6 * 4 =", 6*4)
	fmt.Println("6 / 4 =", 6/4)
	fmt.Println("6 % 4 =", 6%4)
	// το % operator (ακέραιας διαίρεσης) είναι διαθέσιμο μόνο για integers.
	// Άρα θα πρέπει να μετατρέψουμε το float σε int όπως παρακάτω.

	fmt.Println("6 % int(4.0) =", a%int(b))
	// χρησιμοποιώ την function int() για να μετατρέψω το 4.0 (float) σε 4 (int)

}
