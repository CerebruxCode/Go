// Κάθε πρόγραμμα Go ξεκινά με μια "Package Decleration" (δήλωση πακέτου) που παρέχει έναν τρόπο για
// επαναχρησιμοποίηση του κώδικα. Η 'main' είναι ο "πυρήνας" του προγράμματος απο όπου
// ξεκινάει η εφαρμογή μας. Έτσι αφού οι εφαρμογές αποτελούνται απο αρχεία κώδικα
// που ανήκουν σε πακέτα, όλες οι εφαρμογές έχουν μια μόνο main. Είναι η πύλη εισόδου
// της εφαρμογής απο όπου ξεκινάει η εκτέλεση της.
// Όλα τα υπόλοιπα αρχεία έχουν και αυτά δήλωση για το σε ποιό package ανήκουν
package main

// Το import επιτρέπει την εισαγωγή βιβλιοθηκών και την εισαγωγή κώδικα από
// άλλα πακέτα (π.χ. απο github θα γράφαμε " import github.com/CerebruxCode/Go ")
// Εδώ η βιβλιοθήκη fmt που εισάγουμε μας παρέχει εργαλεία μορφοποίησης - προβολής δεδομένων

import "fmt"

// Ξεκινώντας μια γραμμή με τα "//" μπορούμε να προσθέσουμε ένα προσωπικό σχόλιο σε μια γραμμή

/*
 Αν θέλουμε πολλαπλές γραμμές όπως αυτό που διαβάζετε τώρα,
 τότε βάζουμε το σχόλιο μας ανάμεσα σε αυτά
*/

func add(x int, y int) int { // δημιουργούμε μια δικιά μας function (συνάρτηση) με ένα όνομα (π.χ. add) η οποία 
	// κάνει μια απλή αριθμητική πράξη προσθήκης δύο αριθμών

	/*η function add παίρνει 2 ορίσματα x και y τύπου integer (ακέραιος αριθμός) και δίνουν έξοδο πάλι int
	πηγή: https://blog.golang.org/gos-declaration-syntax
	*/

	/*εφόσον τα ορίσματα είναι καί τα δύο int μπορούμε να τα γράψουμε με ένα int
	όπως π.χ. func add(x, y int) int
	*/
	return x + y // προσθέτει δυο αριθμούς τύπου int
}

// Οι functions του προγράμματός μας ξεκινούν με τη λέξη κλειδί func και περιβάλλουν τον κώδικα μέσα σε { }
// Η main είναι η function που εκτελείται όταν τρέχετε το πρόγραμμά σας.
// Θα εκτελεστεί αυτόματα το πρόγραμμα, χωρίς να χρειάζεται να το ξεκινήσετε με π.χ. main()
// όπως απαιτείται σε άλλες γλώσσες.

func main() { // η κύρια συνάρτηση που εκτελεί την εφαρμογή

	// Η Println είναι και αυτή μια function μέσα απο το πακέτο fmt που εξάγει - τυπώνει 
	// μια συμβολοσειρά (strings), η οποία περιβάλλεται από διπλά εισαγωγικά 
	// π.χ. "Γειά σου κόσμε", σε μια νέα γραμμή στην οθόνη

	fmt.Println("Γειά σου κόσμε") // εκτελούμε την Println που βρίσκεται
	// μέσα στην fmt βιβλιοθήκη που εισήγαμε

	/* Μπορείτε να μάθετε για την Println πληκτρολογώντας << godoc fmt Println >>
	σε ένα τερματικό. Το πρόγραμμα σας, όπως αυτό, μπορείτε να το τρέξετε σε τερματικό γράφοντας
	π.χ. go run data_type_math.go

	Οι μεταβλητές (Variables) γράφονται στατικά (statically typed), πράγμα που σημαίνει ότι ο τύπος 
	(type) τους δεν μπορεί να αλλάξει (static). Τα ονόματα μεταβλητών πρέπει να ξεκινούν με ένα 
	γράμμα και μπορεί να περιέχουν γράμματα, αριθμούς ή την κάτω παύλα _
	Για τους αριθμούς έχουμε τους παρακάτω τύπους:
	
	uint8  : ονομάζεται unsigned  8-bit integers (0 έως 255)
	uint16 : ονομάζεται unsigned 16-bit integers (0 έως 65535)
	uint32 : ονομάζεται unsigned 32-bit integers (0 έως 4294967295)
	uint64 : ονομάζεται unsigned 64-bit integers (0 έως 18446744073709551615)
	uint, uintptr σε 32bit επεξ είναι uint32 και uint64 σε 64bit

	Μια int (integer - ακέραιος) είναι ένας θετικός ή αρνητικός αριθμός χωρίς δεκαδικά ψηφία
	int8  : ονομάζεται signed  8-bit integers (-128 έως 127)
	int16 : ονομάζεται signed 16-bit integers (-32768 έως 32767)
	int32 : ονομάζεται signed 32-bit integers (-2147483648 έως 2147483647)
	int64 : ονομάζεται signed 64-bit integers (-9223372036854775808 έως 9223372036854775807)
	το int σε 32bit επεξεργαστές είναι int32 και int64 σε 64bit
	*/

	fmt.Println(add(42, 13))

	var age int64 = 40

	// Αντίθετα ένας float είναι ένας αριθμός με δεκαδικά ψηφία:
	// float32, float64

	var favNum float64 = 1.61803398875

	// Στην πραγματικότητα δε χρειάζεται να καθορίσετε τον τύπο δεδομένων, ούτε χρειάζεστε 
	// ερωτηματικό στο τέλος όπως ίσως έχετε δει σε άλλες γλώσσες προγραμματισμού:

	randNum := 1
	fmt.Println(randNum)

	/*
			 Δεν μπορείτε, ωστόσο αργότερα, να εκχωρήσετε έναν μη συμβατό τύπο στην μεταβλητή
		     π.χ. να αλλάξετε το υφιστάμενο randNum που είναι int να το κάνετε
		     randNum = "Hello"

			 Στην Println εκτός απο strings μπορείτε να χρησιμοποιήσετε
			 μεταβλητές (το κενό διάστημα προστίθεται αυτόματα οπότε δεν χρειάζεται)
	*/

	fmt.Println(age, " ", favNum)

	var numOne = 1.000
	var num99 = .999

	// Μπορείτε επίσης να κάνετε αριθμητικές πράξεις σε Println (Σημειώστε ότι οι float αριθμοί δεν είναι ακριβείς)

	fmt.Println(numOne - num99)

	// Διαθέσιμες αριθμητικές πράξεις : +, -, *, /, %
	// το % ή αλλιώς modulus, modulo, remainder είναι το υπόλοιπο μιας ακέραιας διαίρεσης

	a := 6
	b := 4.0 // float
	fmt.Println("6 + 4 =", 6+4)
	fmt.Println("6 - 4 =", 6-4)
	fmt.Println("6 * 4 =", 6*4)
	fmt.Println("6 / 4 =", 6/4)
	fmt.Println("6 % 4 =", 6%4)
	// το % operator είναι διαθέσιμο μόνο για integers οπότε δείτε παρακάτω
	fmt.Println("6 % int(4.0) =", a%int(b)) // Αν θέλω να κάνω πράξη μεταξυ int και float
	// η Go θα μας κράξει και πρέπει πρώτα να την μετατρέψουμε σε int

}
